---
title: "内在能力建模"
author: "Ruifu Kang & Yirou Niu"
date: "2024-12-26"
format: "pptx"
---

# 建模步骤
## 数据初步清洗

1. 读取并合并数据
2. 变量重命名：内在能力及其相关变量，包括出生年份、性别等都重命名
3. 年龄数据清洗：去掉非老年人的个体之后9982人
## 内在能力赋值

### 1. 运动
- 2.5米步行速度≥ 1米/秒得1分；
- 重复坐下5次≤12秒得1分；
- 平衡：3个10秒完成2个及以上得1分。
- 满分3分

### 2. 认知
- 情景记忆（基于延迟回忆得分）：0-10分；
- 减7测试：5分；
- 日期、月份、年份和季节：5分；
- 绘画：1分。
- 满分21分 
- 按四分位数分为0、1、2、3四个分数（还是用线性变换）
- 满分3分

### 3. 心理
- CES-D评分为0到9分：得1分；
- 总睡眠时间在5到10.5小时之间，得1分；
- 睡眠质量：一周内睡眠不安的频率0到2天之间得1分。
- 满分3分

### 4.  感官
- 听力回答非常好、好、一般：得1分；
- 视力回答非常好、好、一般：得1分（远和近两项）
- 满分3分

### 5.  活力
- 握力：男性≥ 35kg得1分，女性≥ 25kg得1分；
- FEV：男性≥ 400得1分，女性≥ 290得1分;
- 血红蛋白：男性≥ 120g/L得1分，女性≥ 110g/L得1分。
- 满分3分

## 内在能力筛选
- 根据内在能力计算情况筛选出覆盖内在能力指标100%的个体
- 保存筛选后的数据到一个新的数据框中  

## 自变量筛选与清洗
### 经验手动筛选
1. 导出原始数据
2. 提取原始数据中的变量名和变量标签，作为两个变量，再加上是否纳入和备注导出为csv
3. 每个类型的数据表单独导出一个工作表
4. 进行手动筛选，筛选出需要的变量（主要根据其临床意义和是否可测算进行筛选）
    - 收入算个人，财产算家庭
    - 再去思考一下bracket的意义
    - 所有的yes再核对
    - 给变量列表加上备注，标出这部分变量的类别
    - 没有观察值的直接排除
5. 将筛选后的数据导出
6. 按照手动筛选出的变量名对原始数据进行清洗，去除不需要的变量，保留内在能力相关变量

### 自变量计算
1. 按照纳入的每个指标附属条目计算出每个指标的最终分数（其中仔细考虑NA和非空0值的意义）
2. 将计算的自变量重新命名


### 缺失值变量筛选
1. 如果某个变量缺失值大于20%，则删除该变量
   
### 算法筛选

1. 采用boruta方法进行算法筛选（可boruta方法需要进行筛选，）


### 连续自变量处理
- 标准化
- 缩放和中心化

### 分类变量处理
- 转化为连续变量
- 转化为哑变量
- 标签编码（适合于等级变量）

## 模型选择
1. 多元线性回归
2. 决策树
3. 随机森林
4. 神经网络
5. 支持向量机

## 模型构建
- 数据再采样（resample）

## 模型验证
- 
# 代码
## 安装并加载需要的包
```{r 安装并加载需要的包}
# 安装并加载所需要的包
if (!requireNamespace("haven", quietly = TRUE)) install.packages("haven")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr") 
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("openxlsx", quietly = TRUE)) install.packages("openxlsx")
if (!requireNamespace("arrow", quietly = TRUE)) install.packages("arrow")
if (!requireNamespace("Boruta", quietly = TRUE)) install.packages("Boruta")
if (!requireNamespace("mice", quietly = TRUE)) install.packages("mice")

library(haven)
library(dplyr)
library(ggplot2)
library(openxlsx)
library(arrow)
library(Boruta)
library(mice)
```
## 读取并合并数据
```{r 读取并合并数据}
files <- list.files("data_raw/2015/self", pattern = "\\.dta$", full.names = TRUE)
data_list <- lapply(files, read_dta)
my_data_raw <- Reduce(function(x, y) {
    merged <- full_join(x, y, by = "ID", suffix = c("", ".dup"))
    dups <- grep("\\.dup$", names(merged), value = TRUE)
    merged <- merged %>% select(-all_of(dups))
    merged
}, data_list)
# 导出成parquet格式
write_parquet(my_data_raw, "data_export/my_data_raw.parquet")
```
## 变量重命名
```{r 变量重命名}
# 变量重命名
my_data_rename <- my_data_raw %>%
    rename(
        # 基本信息重命名
        id_birth_year = ba004_w3_1,   # ID出生年份
        actual_birth_year = ba002_1,  # 实际出生年份 
        death = died,                 # 是否死亡
        gender = ba000_w2_3,          # 性别

        # 内在能力运动维度重命名
        balance_test_affected = pd001,  # 是否影响完成平衡测试
        understand_and_willing_semi_tandem = pd002,  # 是否明白且愿意参加双脚前后半站立测试
        stand_test_semi_tandem_reason_1 = qd001s1,  # 未完成双脚半前后站立测试的第一个原因
        stand_test_semi_tandem_reason_2 = qd001s2,  # 未完成双脚半前后站立测试的第二个原因
        stand_test_semi_tandem_reason_3 = qd001s3,  # 未完成双脚半前后站立测试的第三个原因
        stand_test_semi_tandem_reason_4 = qd001s4,  # 未完成双脚半前后站立测试的第四个原因
        stand_test_semi_tandem_reason_5 = qd001s5,  # 未完成双脚半前后站立测试的第五个原因
        stand_test_semi_tandem_reason_6 = qd001s6,  # 未完成双脚半前后站立测试的第六个原因
        stand_test_semi_tandem_reason_7 = qd001s7,  # 未完成双脚半前后站立测试的第七个原因
        stand_test_semi_tandem_reason_8 = qd001s8,  # 未完成双脚半前后站立测试的第八个原因
        stand_test_semi_tandem_reason_other = qd001s97,  # 未完成双脚半前后站立测试的其他原因
        stand_test_semi_tandem = qd002,  # 是否完成双脚半前后站立测试

        understand_and_willing_tandem = pe002,  # 是否明白且愿意参加双脚一条线站立测试
        stand_test_tandem_reason_1 = qe001s1,  # 未完成双脚一条线站立测试的第一个原因
        stand_test_tandem_reason_2 = qe001s2,  # 未完成双脚一条线站立测试的第二个原因
        stand_test_tandem_reason_3 = qe001s3,  # 未完成双脚一条线站立测试的第三个原因
        stand_test_tandem_reason_4 = qe001s4,  # 未完成双脚一条线站立测试的第四个原因
        stand_test_tandem_reason_5 = qe001s5,  # 未完成双脚一条线站立测试的第五个原因
        stand_test_tandem_reason_6 = qe001s6,  # 未完成双脚一条线站立测试的第六个原因
        stand_test_tandem_reason_7 = qe001s7,  # 未完成双脚一条线站立测试的第七个原因
        stand_test_tandem_reason_8 = qe001s8,  # 未完成双脚一条线站立测试的第八个原因
        stand_test_tandem_reason_other = qe001s97,  # 未完成双脚一条线站立测试的其他原因
        stand_test_tandem = qe002,       # 双脚一条线站立测试
        stand_test_tandem_time = qe003,  # 双脚一条线站立测试时间

        understand_and_willing_feet_together = pf001,  # 是否明白且愿意参加双脚并拢站立测试
        stand_test_feet_together_reason_1 = qf001s1,  # 未完成双脚并拢站立测试的第一个原因
        stand_test_feet_together_reason_2 = qf001s2,  # 未完成双脚并拢站立测试的第二个原因
        stand_test_feet_together_reason_3 = qf001s3,  # 未完成双脚并拢站立测试的第三个原因
        stand_test_feet_together_reason_4 = qf001s4,  # 未完成双脚并拢站立测试的第四个原因
        stand_test_feet_together_reason_5 = qf001s5,  # 未完成双脚并拢站立测试的第五个原因
        stand_test_feet_together_reason_6 = qf001s6,  # 未完成双脚并拢站立测试的第六个原因
        stand_test_feet_together_reason_7 = qf001s7,  # 未完成双脚并拢站立测试的第七个原因
        stand_test_feet_together_reason_8 = qf001s8,  # 未完成双脚并拢站立测试的第八个原因
        stand_test_feet_together_reason_other = qf001s97,  # 未完成双脚并拢站立测试的其他原因
        stand_test_feet_together = qf002, # 双脚并拢站立测试

        walk_test_reason_1 = qg001s1,  # 未完成步行测试的第一个原因
        walk_test_reason_2 = qg001s2,  # 未完成步行测试的第二个原因
        walk_test_reason_3 = qg001s3,  # 未完成步行测试的第三个原因
        walk_test_reason_4 = qg001s4,  # 未完成步行测试的第四个原因
        walk_test_reason_5 = qg001s5,  # 未完成步行测试的第五个原因
        walk_test_reason_6 = qg001s6,  # 未完成步行测试的第六个原因
        walk_test_reason_7 = qg001s7,  # 未完成步行测试的第七个原因
        walk_test_reason_8 = qg001s8,  # 未完成步行测试的第八个原因
        walk_test_reason_other = qg001s97,  # 未完成步行测试的其他原因
        walk_time_first = qg002,       # 步行测试时间1
        walk_time_second = qg003,      # 步行测试时间2
        walk_test_aid = qg005,       # 步行测试使用辅具情况

        sit_stand_test_reason_1 = qh001s1,  # 未完成五次坐下起来测试的第一个原因
        sit_stand_test_reason_2 = qh001s2,  # 未完成五次坐下起来测试的第二个原因
        sit_stand_test_reason_3 = qh001s3,  # 未完成五次坐下起来测试的第三个原因
        sit_stand_test_reason_4 = qh001s4,  # 未完成五次坐下起来测试的第四个原因
        sit_stand_test_reason_5 = qh001s5,  # 未完成五次坐下起来测试的第五个原因
        sit_stand_test_reason_6 = qh001s6,  # 未完成五次坐下起来测试的第六个原因
        sit_stand_test_reason_7 = qh001s7,  # 未完成五次坐下起来测试的第七个原因
        sit_stand_test_reason_8 = qh001s8,  # 未完成五次坐下起来测试的第八个原因
        sit_stand_test_reason_other = qh001s97,  # 未完成五次坐下起来测试的其他原因
        sit_stand_test_completed = qh002,  # 是否完成五次坐下起来测试
        sit_stand_test_time = qh003,  # 完成五次坐下起来测试的时间
        sit_stand_test_arm_use = qh007,  # 坐起测试中使用手臂的情况

        

        # 内在能力认知维度重命名
        # 内在能力认知维度重命名
        proxy_answer = db032,          # 是否由别人代答
        recall_word_1 = dc006s1,       # 回忆词汇1
        recall_word_2 = dc006s2,       # 回忆词汇2
        recall_word_3 = dc006s3,       # 回忆词汇3
        recall_word_4 = dc006s4,       # 回忆词汇4
        recall_word_5 = dc006s5,       # 回忆词汇5
        recall_word_6 = dc006s6,       # 回忆词汇6
        recall_word_7 = dc006s7,       # 回忆词汇7
        recall_word_8 = dc006s8,       # 回忆词汇8
        recall_word_9 = dc006s9,       # 回忆词汇9
        recall_word_10 = dc006s10,     # 回忆词汇10
        recall_none = dc006s11,        # 是否一个都没回忆起来
        recall_refused = dc006s12,     # 是否拒绝回忆

        recall_year = dc001s1,         # 回忆年份
        recall_month = dc001s2,        # 回忆月份
        recall_day = dc001s3,          # 回忆日期
        recall_weekday = dc002,        # 回忆星期
        recall_season = dc003,         # 回忆季节

        subtraction_test_1 = dc019,    # 减法测试1
        subtraction_test_2 = dc020,    # 减法测试2
        subtraction_test_3 = dc021,    # 减法测试3
        subtraction_test_4 = dc022,    # 减法测试4
        subtraction_test_5 = dc023,    # 减法测试5
        subtraction_tool_use = dc024,  # 是否使用工具计算

        drawing_test = dc025,          # 画图测试


        # 内在能力心理维度重命名
        depression_scale_1 = dc009,    # 心理量表问题1
        depression_scale_2 = dc010,    # 心理量表问题2
        depression_scale_3 = dc011,    # 心理量表问题3
        depression_scale_4 = dc012,    # 心理量表问题4
        depression_scale_5 = dc013,    # 心理量表问题5
        depression_scale_6 = dc014,    # 心理量表问题6
        depression_scale_7 = dc016,    # 心理量表问题7
        depression_scale_8 = dc017,    # 心理量表问题8
        depression_scale_9 = dc018,    # 心理量表问题9
        night_sleep_time = da049,      # 夜晚睡眠时间
        poor_sleep_frequency = dc015,  # 睡眠不佳频率
        nap_time = da050,              # 午睡时间

        # 内在能力感官维度重命名
        wearing_glasses = da032,       # 是否佩戴眼镜
        far_vision = da033,            # 看远处视力情况
        near_vision = da034,           # 看近处视力情况
        hearing_aid = da038,           # 是否佩戴助听器
        hearing_status = da039,        # 听力情况
        
        
        # 内在能力活力维度重命名
        grip_test_reason_1 = qc001s1,  # 未完成握力测量的第一个原因
        grip_test_reason_2 = qc001s2,  # 未完成握力测量的第二个原因
        grip_test_reason_3 = qc001s3,  # 未完成握力测量的第三个原因
        grip_test_reason_4 = qc001s4,  # 未完成握力测量的第四个原因
        grip_test_reason_5 = qc001s5,  # 未完成握力测量的第五个原因
        grip_test_reason_6 = qc001s6,  # 未完成握力测量的第六个原因
        grip_test_reason_7 = qc001s7,  # 未完成握力测量的第七个原因
        grip_test_reason_8 = qc001s8,  # 未完成握力测量的第八个原因
        grip_test_reason_other = qc001s97,  # 未完成握力测量的其他原因
        left_hand_grip_1 = qc003,      # 第一次左手握力测量
        right_hand_grip_1 = qc004,     # 第一次右手握力测量
        left_hand_grip_2 = qc005,      # 第二次左手握力测量
        right_hand_grip_2 = qc006,     # 第二次右手握力测量

        breath_test_reason_1 = qb001s1,  # 未完成呼吸测试的第一个原因
        breath_test_reason_2 = qb001s2,  # 未完成呼吸测试的第二个原因
        breath_test_reason_3 = qb001s3,  # 未完成呼吸测试的第三个原因
        breath_test_reason_4 = qb001s4,  # 未完成呼吸测试的第四个原因
        breath_test_reason_5 = qb001s5,  # 未完成呼吸测试的第五个原因
        breath_test_reason_6 = qb001s6,  # 未完成呼吸测试的第六个原因
        breath_test_reason_7 = qb001s7,  # 未完成呼吸测试的第七个原因
        breath_test_reason_8 = qb001s8,  # 未完成呼吸测试的第八个原因
        breath_test_reason_other = qb001s97,  # 未完成呼吸测试的其他原因
        breath_test_1 = qb002,         # 第一次呼吸功能测定
        breath_test_2 = qb003,         # 第二次呼吸功能测定
        breath_test_3 = qb004,         # 第三次呼吸功能测定

        hemoglobin = bl_hgb          # 血红蛋白含量
    )
# 导出包含所有重命名列的数据
renamed_columns <- names(my_data_rename)
original_columns <- names(my_data_raw)
renamed_only_columns <- setdiff(renamed_columns, original_columns)
my_data_renamed_only <- my_data_rename %>%
    select(all_of(renamed_only_columns))
write.csv(my_data_renamed_only, "data_export/renamed_data.csv", row.names = FALSE)

```
## 年龄数据清洗
```{r 年龄数据清洗}
# 去除实际出生年份和ID出生年份同时缺失的数据
my_data_year_na <- my_data_rename %>%
    filter(!(is.na(actual_birth_year) & is.na(id_birth_year)))

# 计算年龄值
my_data_age <- my_data_year_na %>%
    mutate(age = 2015 - coalesce(actual_birth_year, id_birth_year))

# 年龄清洗
my_data_elder <- my_data_age %>%
    filter(age >= 60)

# 输出现在总共多少人
total_individuals <- nrow(my_data_elder)
print(paste("总共人数:", total_individuals))
my_data_wash <- my_data_elder

```
## 内在能力分数计算
### 运动维度计算
```{r 运动维度计算}
# 计算步行测试时间（无误）
my_data_wash <- my_data_wash %>%
    mutate(
        final_walk_time = case_when(
            walk_time_first == 993 & walk_time_second == 993 ~ 0,
            (is.na(walk_time_first) & is.na(walk_time_second)) | (walk_time_first == 999 & walk_time_second == 999) | (is.na(walk_time_first) & walk_time_second == 999) | (walk_time_first == 999 & is.na(walk_time_second)) ~ case_when(
                rowSums(select(., starts_with("walk_test_reason_")) == 4, na.rm = TRUE) > 0 ~ 0,
                rowSums(select(., starts_with("walk_test_reason_")) == 6, na.rm = TRUE) > 0 ~ 0,
                TRUE ~ NA_real_
            ),
            TRUE ~ case_when(
                walk_test_aid == 1 ~ if_else(2.5 / pmin(walk_time_first, walk_time_second, na.rm = TRUE) >= 1, 1, 0),
                walk_test_aid %in% c(2, 3, 4, 97) ~ 0,
                TRUE ~ NA_real_
            )
        )
    )

# 统计最终步行时间分数不同取值的数量，包括NA
table(my_data_wash$final_walk_time, useNA = "always")

# 计算平衡分数
# 计算双脚半前后站立时间分数（无误）
my_data_wash <- my_data_wash %>%
    mutate(
        final_semi_tandem_time = case_when(
            stand_test_semi_tandem %in% c(993) ~ 0, # 因为存在这个变量为993但是原因没有4和6的情况，所以这种直接赋值为0了，按这个变量优先
            stand_test_semi_tandem %in% c(999, NA) ~ case_when(
                rowSums(select(., starts_with("stand_test_semi_tandem_reason_")) == 4, na.rm = TRUE) > 0 ~ 0,
                rowSums(select(., starts_with("stand_test_semi_tandem_reason_")) == 6, na.rm = TRUE) > 0 ~ 0,
                TRUE ~ NA_real_
            ),
            stand_test_semi_tandem == 1 ~ 1,
            stand_test_semi_tandem == 5 ~ 0,
            TRUE ~ NA_real_
        )
    )


# 统计双脚半前后站立时间分数不同取值的数量，包括NA
table(my_data_wash$final_semi_tandem_time, useNA = "always")


# 计算双脚前后一条线站立时间分数（无误）
my_data_wash <- my_data_wash %>%
    mutate(
        final_tandem_time = case_when(
            stand_test_tandem %in% c(993) ~ 0, # 因为存在这个变量为993但是原因没有4和6的情况，所以这种直接赋值为0了，按这个变量优先
            stand_test_tandem %in% c(999, NA) ~ case_when(
                rowSums(select(., starts_with("stand_test_tandem_reason_")) == 4, na.rm = TRUE) > 0 ~ 0,
                rowSums(select(., starts_with("stand_test_tandem_reason_")) == 6, na.rm = TRUE) > 0 ~ 0,
                TRUE ~ NA_real_
            ),
            stand_test_tandem == 1 ~ 1,
            stand_test_tandem == 5 ~ if_else(stand_test_tandem_time >= 10, 1, 0),
            TRUE ~ NA_real_
        )
    )
# 统计双脚前后一条线站立分数不同取值的数量，包括NA
table(my_data_wash$final_tandem_time, useNA = "always")


# 计算双脚并拢站立时间分数（无误）
my_data_wash <- my_data_wash %>%
    mutate(
        final_feet_together_time = case_when(
            stand_test_feet_together %in% c(993) ~ 0,
            stand_test_feet_together %in% c(999, NA) ~ case_when(
                rowSums(select(., starts_with("stand_test_feet_together_reason_")) == 4, na.rm = TRUE) > 0 ~ 0,
                rowSums(select(., starts_with("stand_test_feet_together_reason_")) == 6, na.rm = TRUE) > 0 ~ 0,
                TRUE ~ NA_real_
            ),
            stand_test_feet_together == 1 ~ 1,
            stand_test_feet_together == 5 ~ 0,
            TRUE ~ NA_real_
        )
    )

# 统计双脚并拢站立分数不同取值的数量，包括NA
table(my_data_wash$final_feet_together_time, useNA = "always")

# 计算最终平衡得分（无误）
my_data_wash <- my_data_wash %>%
    mutate(
        final_balance_score = case_when(
            rowSums(select(., final_semi_tandem_time, final_tandem_time, final_feet_together_time) == 1, na.rm = TRUE) >= 2 ~ 1,
            rowSums(is.na(select(., final_semi_tandem_time, final_tandem_time, final_feet_together_time))) >= 2 ~ NA_real_,
            rowSums(is.na(select(., final_semi_tandem_time, final_tandem_time, final_feet_together_time))) == 1 &
            rowSums(select(., final_semi_tandem_time, final_tandem_time, final_feet_together_time) == 1, na.rm = TRUE) == 1 &
            rowSums(select(., final_semi_tandem_time, final_tandem_time, final_feet_together_time) == 0, na.rm = TRUE) == 1 ~ NA_real_,
            TRUE ~ 0
        )
    )
# 统计最终平衡得分不同取值的数量，包括NA
table(my_data_wash$final_balance_score, useNA = "always")

# 计算坐起测试时间(无误)
my_data_wash <- my_data_wash %>%
    mutate(
        final_sit_stand_time = case_when(
            sit_stand_test_completed %in% c(993) ~ 0,
            sit_stand_test_completed %in% c(999, NA) ~ case_when(
                rowSums(select(., starts_with("sit_stand_test_reason_")) == 4, na.rm = TRUE) > 0 ~ 0,
                rowSums(select(., starts_with("sit_stand_test_reason_")) == 6, na.rm = TRUE) > 0 ~ 0,
                TRUE ~ NA_real_
            ),
            sit_stand_test_completed == 1 ~ case_when(
                sit_stand_test_arm_use == 1 ~ 0,
                sit_stand_test_arm_use == 5 ~ case_when( # 这个地方数据和代码本否是5，但questionare是1，弄了半天
                    sit_stand_test_time <= 12 ~ 1,
                    sit_stand_test_time > 12 ~ 0,
                    TRUE ~ NA_real_
                    ),
                TRUE ~ NA_real_ 
            ),
            sit_stand_test_completed == 5 ~ 0,
            TRUE ~ NA_real_
        )
    )

# 查看起坐测试时间分数不同取值的数量，包括NA
table(my_data_wash$final_sit_stand_time, useNA = "always")

# 计算运动维度总分（无误）
my_data_wash <- my_data_wash %>%
    mutate(
        final_physical_score = rowSums(select(., final_walk_time, final_balance_score, final_sit_stand_time), na.rm = FALSE)
    )

# 查看运动维度总分不同取值的数量，包括NA
table(my_data_wash$final_physical_score, useNA = "always")

# 导出运动维度所有变量和ID，去除其他所有变量，导出一个csv
required_columns <- c(
    "ID", "final_walk_time", "final_semi_tandem_time", "final_tandem_time", "final_feet_together_time", "final_balance_score", "final_sit_stand_time", "final_physical_score"
)
my_data_physical <- my_data_wash %>%
    select(all_of(required_columns))

write.csv(my_data_physical, "data_export/physical_dimension_data.csv", row.names = FALSE)
```
### 认知维度计算
```{r 认知维度计算}
# 计算最终回忆分数（无误）
my_data_wash <- my_data_wash %>%
    mutate(
        final_recall_score = case_when(
            !is.na(recall_refused) ~ NA_real_,
            !is.na(recall_none) ~ 0,
            TRUE ~ rowSums(select(., starts_with("recall_word_")) %>% mutate_all(~ if_else(!is.na(.), 1, 0)), na.rm = TRUE)
        )
    )

# 统计最终回忆分数不同取值的数量，包括NA
table(my_data_wash$final_recall_score, useNA = "always")

# 统计是否使用计算工具
table(my_data_wash$subtraction_tool_use, useNA = "always")

# 计算减法测试总分
my_data_wash <- my_data_wash %>%
    mutate(
        total_subtraction_score = case_when(
            is.na(subtraction_tool_use) ~ NA_real_,# 辅助工具这项NA还挺多的，要考虑这个吗
            subtraction_tool_use == 1 ~ 0,
            rowSums(is.na(select(., starts_with("subtraction_test_")))) == 5 ~ 0,
            TRUE ~ rowSums(
                cbind(
                    if_else(subtraction_test_1 == 93, 1, 0),
                    if_else(subtraction_test_2 == 86, 1, 0),
                    if_else(subtraction_test_3 == 79, 1, 0),
                    if_else(subtraction_test_4 == 72, 1, 0),
                    if_else(subtraction_test_5 == 65, 1, 0)
                ),
                na.rm = TRUE
            )
        )
    )

# 统计减法测试总分不同取值的数量，包括NA
table(my_data_wash$total_subtraction_score, useNA = "always")


# 计算日期感知总分(NA处理成0)
my_data_wash <- my_data_wash %>%
    mutate(
        final_date_perception_score = rowSums(
            cbind(
                if_else(!is.na(recall_year), 1, 0),
                if_else(!is.na(recall_month), 1, 0),
                if_else(!is.na(recall_day), 1, 0)
            ),
            na.rm = TRUE
        )
    )

# 统计日期感知总分不同取值的数量，包括NA
table(my_data_wash$final_date_perception_score, useNA = "always")


# 计算星期和季节感知总分
my_data_wash <- my_data_wash %>%
    mutate(
        final_week_season_perception_score = rowSums(
            cbind(
                if_else(recall_weekday == 1, 1, if_else(recall_weekday == 2, 0, NA_real_)),
                if_else(recall_season == 1, 1, if_else(recall_season == 2, 0, NA_real_))
            ),
            na.rm = FALSE
        )
    )

# 统计星期和季节感知总分不同取值的数量，包括NA
table(my_data_wash$final_week_season_perception_score, useNA = "always")

# 计算时间感知总分
my_data_wash <- my_data_wash %>%
    mutate(
        final_time_perception_score = final_date_perception_score + final_week_season_perception_score
    )

# 统计时间感知总分不同取值的数量，包括NA
table(my_data_wash$final_time_perception_score, useNA = "always")

# 计算最终绘画得分
my_data_wash <- my_data_wash %>%
    mutate(
        final_drawing_score = case_when(
            drawing_test == 1 ~ 1,
            drawing_test == 2 ~ 0,
            TRUE ~ NA_real_
        )
    )

# 统计最终绘画得分不同取值的数量，包括NA
table(my_data_wash$final_drawing_score, useNA = "always")

# 认知维度总分计算
my_data_wash <- my_data_wash %>%
    mutate(
        final_cognitive_score = final_recall_score + total_subtraction_score + final_time_perception_score + final_drawing_score
    )

# 统计认知维度总分不同取值的数量，包括NA
table(my_data_wash$final_cognitive_score, useNA = "always")

# 计算认知维度层次
quantiles <- quantile(my_data_wash$final_cognitive_score, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
my_data_wash <- my_data_wash %>%
    mutate(
        cognitive_level = case_when(
            is.na(final_cognitive_score) ~ NA_real_,
            final_cognitive_score <= quantiles[1] ~ 0,
            final_cognitive_score > quantiles[1] & final_cognitive_score <= quantiles[2] ~ 1,
            final_cognitive_score > quantiles[2] & final_cognitive_score <= quantiles[3] ~ 2,
            final_cognitive_score > quantiles[3] ~ 3
        )
    )

# 查看认知维度层次不同取值的数量，包括NA
table(my_data_wash$cognitive_level, useNA = "always")

# 导出认知维度所有变量和ID，去除其他所有变量，导出一个csv
required_columns <- c(
    "ID", "final_recall_score", "total_subtraction_score", "final_time_perception_score", "final_drawing_score", "final_cognitive_score", "cognitive_level"
)
my_data_cognitive <- my_data_wash %>%
    select(all_of(required_columns))

write.csv(my_data_cognitive, "data_export/cognitive_dimension_data.csv", row.names = FALSE)
```
### 心理维度计算
```{r 心理维度计算}
# 计算总睡眠时间（无误）
my_data_wash <- my_data_wash %>%
    mutate(
        total_sleep_time = case_when(
            is.na(night_sleep_time) ~ NA_real_,
            TRUE ~ night_sleep_time + coalesce(nap_time / 60, 0)
        )
    )

# 计算睡眠时间分数（无误）
my_data_wash <- my_data_wash %>%
    mutate(
        final_sleep_time_score = case_when(
            is.na(total_sleep_time) ~ NA_real_,
            total_sleep_time >= 5 & total_sleep_time <= 10.5 ~ 1,
            TRUE ~ 0
        )
    )

# 查看睡眠时间分数不同取值的数量，包括NA
table(my_data_wash$final_sleep_time_score, useNA = "always")

# 计算不良睡眠频率分数（无误）
my_data_wash <- my_data_wash %>%
    mutate(
        final_poor_sleep_score = case_when(
            poor_sleep_frequency %in% c(1, 2) ~ 1,
            poor_sleep_frequency %in% c(3, 4) ~ 0,
            TRUE ~ NA_real_
        )
    )

# 查看不良睡眠频率分数不同取值的数量，包括NA
table(my_data_wash$final_poor_sleep_score, useNA = "always")

# 计算抑郁总分（目前全部NA才算NA，应该一个NA就是NA）
my_data_wash <- my_data_wash %>%
    mutate(
        total_depression_score = if_else(
            rowSums(is.na(select(., starts_with("depression_scale_")))) > 0,
            NA_real_,
            rowSums(
                select(., starts_with("depression_scale_")) %>%
                    mutate_all(~ case_when(
                        . == 1 ~ 0,
                        . == 2 ~ 1,
                        . == 3 ~ 2,
                        . == 4 ~ 3,
                        TRUE ~ 0
                    )) %>%
                    mutate(
                        depression_scale_5 = case_when(
                            depression_scale_5 == 1 ~ 3,
                            depression_scale_5 == 2 ~ 2,
                            depression_scale_5 == 3 ~ 1,
                            depression_scale_5 == 4 ~ 0,
                            TRUE ~ 0
                        ),
                        depression_scale_8 = case_when(
                            depression_scale_8 == 1 ~ 3,
                            depression_scale_8 == 2 ~ 2,
                            depression_scale_8 == 3 ~ 1,
                            depression_scale_8 == 4 ~ 0,
                            TRUE ~ 0
                        )
                    ),
                na.rm = TRUE
            )
        )
    ) %>%
    mutate(
        final_depression_score = case_when(
            is.na(total_depression_score) ~ NA_real_,
            total_depression_score <= 9 ~ 1,
            TRUE ~ 0
        )
    )

# 统计抑郁总分不同取值的数量，包括NA
table(my_data_wash$final_depression_score, useNA = "always")

# 心理维度总分计算
my_data_wash <- my_data_wash %>%
    mutate(
        final_psychological_score = rowSums(select(., final_sleep_time_score, final_poor_sleep_score, final_depression_score), na.rm = FALSE)
    )

# 统计心理维度总分不同取值的数量，包括NA
table(my_data_wash$final_psychological_score, useNA = "always")

# 导出心理维度所有变量和ID，去除其他所有变量，导出一个csv
required_columns <- c(
    "ID", "total_sleep_time", "final_sleep_time_score", "final_poor_sleep_score", "final_depression_score", "final_psychological_score",
    "depression_scale_1", "depression_scale_2", "depression_scale_3", "depression_scale_4", "depression_scale_5", "depression_scale_6",
    "depression_scale_7", "depression_scale_8", "depression_scale_9"
)
my_data_psychological <- my_data_wash %>%
    select(all_of(required_columns))

write.csv(my_data_psychological, "data_export/psychological_dimension_data.csv", row.names = FALSE)
```
### 感官维度计算
```{r 感官维度计算}
# 计算视力总分（无误）
my_data_wash <- my_data_wash %>%
    mutate(
        final_far_vision = case_when(
            wearing_glasses %in% c(1, 2) ~ 0,
            wearing_glasses %in% c(3, 4) ~ case_when(
                far_vision %in% c(1, 2, 3, 4) ~ 1,
                far_vision == 5 ~ 0,
                TRUE ~ NA_real_
            ),
            TRUE ~ NA_real_
        ),
        final_near_vision = case_when(
            wearing_glasses %in% c(1, 2) ~ 0,
            wearing_glasses %in% c(3, 4) ~ case_when(
                near_vision %in% c(1, 2, 3, 4) ~ 1,
                near_vision == 5 ~ 0,
                TRUE ~ NA_real_
            ),
            TRUE ~ NA_real_
        )
    )

# 统计视力总分不同取值的数量，包括NA
table(my_data_wash$final_far_vision, useNA = "always")
table(my_data_wash$final_near_vision, useNA = "always")

# 计算听力总分（无误）
my_data_wash <- my_data_wash %>%
    mutate(
        final_hearing_score = case_when(
            hearing_aid == 1 ~ 0,
            hearing_aid == 2 ~ case_when(
                hearing_status %in% c(1, 2, 3, 4) ~ 1,
                hearing_status == 5 ~ 0,
                TRUE ~ NA_real_
            ),
            TRUE ~ NA_real_
        )
    )
# 统计听力总分不同取值的数量，包括NA
table(my_data_wash$final_hearing_score, useNA = "always")

# 计算感官维度总分
my_data_wash <- my_data_wash %>%
    mutate(
        final_sensory_score = rowSums(select(., final_far_vision, final_near_vision, final_hearing_score), na.rm = FALSE)
    )
# 统计感官维度总分不同取值的数量，包括NA
table(my_data_wash$final_sensory_score, useNA = "always")

# 导出感官维度所有变量和ID，去除其他所有变量，导出一个csv
required_columns <- c(
    "ID", "final_far_vision", "final_near_vision", "final_hearing_score", "final_sensory_score"
)
my_data_sensory <- my_data_wash %>%
    select(all_of(required_columns))

write.csv(my_data_sensory, "data_export/sensory_dimension_data.csv", row.names = FALSE)
```
### 活力维度计算
```{r 活力维度计算}
# 计算左手握力分数（无误）
my_data_wash <- my_data_wash %>%
    mutate(
        final_left_hand_grip = case_when(
            left_hand_grip_1 == 993 & left_hand_grip_2 == 993 ~ 0,
            (is.na(left_hand_grip_1) & is.na(left_hand_grip_2)) | (left_hand_grip_1 == 999 & left_hand_grip_2 == 999) | (is.na(left_hand_grip_1) & left_hand_grip_2 == 999) | (left_hand_grip_1 == 999 & is.na(left_hand_grip_2)) ~ case_when(
                rowSums(select(., starts_with("grip_test_reason_")) == 4, na.rm = TRUE) > 0 ~ 0,
                rowSums(select(., starts_with("grip_test_reason_")) == 6, na.rm = TRUE) > 0 ~ 0,
                TRUE ~ NA_real_
            ),
            TRUE ~ pmax(left_hand_grip_1, left_hand_grip_2, na.rm = TRUE)
        )
    )

# 计算右手握力分数（无误）
my_data_wash <- my_data_wash %>%
    mutate(
        final_right_hand_grip = case_when(
            right_hand_grip_1 == 993 & right_hand_grip_2 == 993 ~ 0,
            (is.na(right_hand_grip_1) & is.na(right_hand_grip_2)) | (right_hand_grip_1 == 999 & right_hand_grip_2 == 999) | (is.na(right_hand_grip_1) & right_hand_grip_2 == 999) | (right_hand_grip_1 == 999 & is.na(right_hand_grip_2)) ~ case_when(
                rowSums(select(., starts_with("grip_test_reason_")) == 4, na.rm = TRUE) > 0 ~ 0,
                rowSums(select(., starts_with("grip_test_reason_")) == 6, na.rm = TRUE) > 0 ~ 0,
                TRUE ~ NA_real_
            ),
            TRUE ~ pmax(right_hand_grip_1, right_hand_grip_2, na.rm = TRUE)
        )
    )

# 计算最终握力分数（无误）
my_data_wash <- my_data_wash %>%
    mutate(
        final_grip_score = case_when(
            gender == 1 ~ if_else(pmax(final_left_hand_grip, final_right_hand_grip, na.rm = TRUE) >= 35, 1, 0),
            gender == 2 ~ if_else(pmax(final_left_hand_grip, final_right_hand_grip, na.rm = TRUE) >= 25, 1, 0),
            TRUE ~ NA_real_ # 性别没法获取的时候这个也没法赋值
        )
    )

# 统计握力分数不同取值的数量，包括NA
table(my_data_wash$final_grip_score, useNA = "always")

# 计算呼吸功能总分（无误）
my_data_wash <- my_data_wash %>%
    mutate(
        final_breath_test = case_when(
            rowSums(select(., starts_with("breath_test_")) == 993, na.rm = TRUE) == 3 ~ 0,
            rowSums(is.na(select(., starts_with("breath_test_"))) | select(., starts_with("breath_test_")) == 999, na.rm = TRUE) == 3 ~ case_when(
                rowSums(select(., starts_with("breath_test_reason_")) == 4, na.rm = TRUE) > 0 ~ 0,
                rowSums(select(., starts_with("breath_test_reason_")) == 6, na.rm = TRUE) > 0 ~ 0,
                TRUE ~ NA_real_
            ),
            TRUE ~ case_when(
                gender == 1 ~ if_else(pmax(breath_test_1, breath_test_2, breath_test_3, na.rm = TRUE) >= 400, 1, 0),
                gender == 2 ~ if_else(pmax(breath_test_1, breath_test_2, breath_test_3, na.rm = TRUE) >= 290, 1, 0),
                TRUE ~ NA_real_
            )
        )
    )

# 统计呼吸功能分数不同取值的数量，包括NA
table(my_data_wash$final_breath_test, useNA = "always")

# 计算血红蛋白分数（算法无误，但不知道上界和下界算不算正常值）
my_data_wash <- my_data_wash %>%
    mutate(
        final_hemoglobin_score = case_when(
            is.na(hemoglobin) ~ NA_real_,
            gender == 1 & hemoglobin * 10 >= 120 & hemoglobin * 10 <= 160 ~ 1,
            gender == 1 & (hemoglobin * 10 < 120 | hemoglobin * 10 > 160) ~ 0,
            gender == 2 & hemoglobin * 10 >= 110 & hemoglobin * 10 <= 150 ~ 1,
            gender == 2 & (hemoglobin * 10 < 110 | hemoglobin * 10 > 150) ~ 0,
            TRUE ~ NA_real_
        )
    )

# 统计血红蛋白分数不同取值的数量，包括NA
table(my_data_wash$final_hemoglobin_score, useNA = "always")    


# 计算活力维度总分
my_data_wash <- my_data_wash %>%
    mutate(
        final_vitality_score = rowSums(select(., final_grip_score, final_breath_test, final_hemoglobin_score), na.rm = FALSE)
    )

# 统计活力维度总分不同取值的数量，包括NA
table(my_data_wash$final_vitality_score, useNA = "always")

# 导出活力维度所有变量和ID，去除其他所有变量，导出一个csv
required_columns <- c(
    "ID", "final_left_hand_grip", "final_right_hand_grip", "final_grip_score", "final_breath_test", "final_hemoglobin_score", "final_vitality_score"
)
my_data_vitality <- my_data_wash %>%select(all_of(required_columns))
write.csv(my_data_vitality, "vitality_dimension_data.csv", row.names = FALSE)
```

### 内在能力总分计算
```{r 内在能力总分计算}
# 计算内在能力总分
my_data_wash <- my_data_wash %>%
    mutate(
        ic_total_score = final_physical_score + cognitive_level + final_psychological_score + final_sensory_score + final_vitality_score
    )
```

## 内在能力清洗
```{r 内在能力清洗}
# 挑出只包含ID和五个内在能力维度总分的变量
final_ic_scores <- my_data_wash %>%
    select(ID, final_physical_score, cognitive_level, final_psychological_score, final_sensory_score, final_vitality_score, ic_total_score)

# 导出包含所有内在能力维度总分的数据
write.csv(final_ic_scores, "data_export/final_ic_scores.csv", row.names = FALSE)

# 计算覆盖百分之百内在能力变量的个体
covered_individuals <- final_ic_scores %>%
    filter(!is.na(final_physical_score) & !is.na(cognitive_level) & !is.na(final_psychological_score) & !is.na(final_sensory_score) & !is.na(final_vitality_score))

# 导出覆盖百分之百内在能力个体的内在能力数据
write.csv(covered_individuals, "data_export/covered_individuals.csv", row.names = FALSE)

# 输出覆盖百分之百内在能力变量的个体数量
covered_count <- nrow(covered_individuals)
print(paste("覆盖百分之百内在能力变量的个体数量:", covered_count))

# 导出覆盖100%的个体数据导出为parquet
my_data_filtered_100_ic <- my_data_wash %>%
    filter(ID %in% covered_individuals$ID)
write_parquet(my_data_filtered_100_ic, "data_export/filtered_data_100_ic.parquet")

# 统计覆盖80%内在能力变量的个体
covered_80_percent_individuals <- final_ic_scores %>%
    filter(rowSums(!is.na(select(., final_physical_score, cognitive_level, final_psychological_score, final_sensory_score, final_vitality_score))) >= 4)

# 导出覆盖80%内在能力变量个体的内在能力数据
write.csv(covered_80_percent_individuals, "data_export/covered_80_percent_individuals.csv", row.names = FALSE)

# 输出覆盖80%内在能力变量的个体数量
covered_80_percent_count <- nrow(covered_80_percent_individuals)
print(paste("覆盖80%内在能力变量的个体数量:", covered_80_percent_count))

# 导出覆盖80%内在能力变量的个体数据
my_data_filtered_80_percent_ic <- my_data_wash %>%
    filter(ID %in% covered_80_percent_individuals$ID)

# 将覆盖80%的个体数据导出为parquet
write_parquet(my_data_filtered_80_percent_ic, "data_export/filtered_data_80_percent_ic.parquet")
```
## 自变量手动筛选
### 自变量及其标签导出
```{r 自变量及其标签导出}
# 提取出原始数据中所有变量标签
variable_labels <- sapply(my_data_raw, function(x) attr(x, "label"))
# 将 NULL 元素替换为空字符串
variable_labels[sapply(variable_labels, is.null)] <- ""
# 将变量标签转换为字符向量
variable_labels_values <- unlist(variable_labels)
# 导出变量标签
variable_labels <- data.frame(
    variable = names(my_data_raw),
    label = variable_labels_values,
    include = "none",
    comments = "",
    stringsAsFactors = FALSE
)
# 创建一个新的Excel工作簿
wb <- createWorkbook()

# 添加一个工作表并写入数据
addWorksheet(wb, "Variable Labels")
writeData(wb, "Variable Labels", variable_labels)

# 保存Excel文件
saveWorkbook(wb, "data_export/variable_labels.xlsx", overwrite = TRUE)
```
### 临床经验筛选数据准备
```{r 临床经验筛选}
# 读取变量列表
variable_list <- read.csv("data_export/variable_labels_manual_filtered.csv")

# 筛选出include为"yes"的变量
selected_vars <- variable_list$variable[variable_list$include == "yes"]

# 内在能力相关变量
ic_vars <- c(
    "final_physical_score",  # 运动维度分数
    "cognitive_level",       # 认知维度分数
    "final_psychological_score", # 心理维度分数
    "final_sensory_score",   # 感官维度分数
    "final_vitality_score",  # 活力维度分数
    "ic_total_score"         # 内在能力总分
)

# 合并需要保留的变量
vars_to_keep <- c(ic_vars, selected_vars)

# 筛选数据
my_data_manual_filtered <- my_data_filtered_100_ic %>%
    select(any_of(vars_to_keep))

# 导出自变量手动筛选后的数据
write_parquet(my_data_manual_filtered, "data_export/my_data_manual_filtered.parquet")
```
## 自变量计算
### 计算初始化
```{r 初始化}
# 初始化计算后的数据
my_data_calculated <- my_data_manual_filtered %>%
    select(ID, final_physical_score, cognitive_level, final_psychological_score, final_sensory_score, final_vitality_score, ic_total_score)
```
### 人口学数据计算
```{r 人口学数据计算}
# 人口统计学数据计算（没问题）
my_data_calculated <- my_data_calculated %>%
    mutate(
        householdID = my_data_manual_filtered$householdID,
        communityID = my_data_manual_filtered$communityID,
        gender = my_data_manual_filtered$xrgender,
        residence_type = case_when(
            is.na(my_data_manual_filtered$bb001_w3_1) ~ NA_real_,
            my_data_manual_filtered$bb001_w3_1 == 1 ~ 1,  # 城市住宅
            my_data_manual_filtered$bb001_w3_1 == 2 ~ 2,  # 农村住宅
            my_data_manual_filtered$bb001_w3_1 == 3 ~ 3,  # 养老院/疗养院
            my_data_manual_filtered$bb001_w3_1 == 4 ~ 4,  # 其他
            TRUE ~ NA_real_
        ),
        address_urban_or_rural = case_when(
            is.na(my_data_manual_filtered$bb001_w3_2) ~ NA_real_,
            my_data_manual_filtered$bb001_w3_2 == 1 ~ 1,  # main city zone
            my_data_manual_filtered$bb001_w3_2 == 2 ~ 2,  # combination zone between urban and rural areas
            my_data_manual_filtered$bb001_w3_2 == 3 ~ 3,  # the town center
            my_data_manual_filtered$bb001_w3_2 == 4 ~ 4,  # zhenxiang area
            my_data_manual_filtered$bb001_w3_2 == 5 ~ 5,  # special area
            my_data_manual_filtered$bb001_w3_2 == 6 ~ 6,  # township central
            my_data_manual_filtered$bb001_w3_2 == 7 ~ 7,  # village
            TRUE ~ NA_real_
        ),
        address_province = case_when(
            is.na(my_data_manual_filtered$bb001_w3) ~ NA_real_,
            TRUE ~ my_data_manual_filtered$bb001_w3
        ),
        literate = case_when(
            is.na(my_data_manual_filtered$bd001_w3_1) ~ NA_real_,
            my_data_manual_filtered$bd001_w3_1 == 1 ~ 1,  # 能读写
            my_data_manual_filtered$bd001_w3_1 == 2 ~ 2,  # 不能读写
            TRUE ~ NA_real_
        ),
        martial_status = case_when(
            is.na(my_data_manual_filtered$be001) ~ NA_real_,
            my_data_manual_filtered$be001 == 1 ~ 1,  # 已婚与配偶一同居住
            my_data_manual_filtered$be001 == 2 ~ 2,  # 已婚但配偶暂时不在一起居住
            my_data_manual_filtered$be001 == 3 ~ 3,  # 已婚但配偶在外地工作
            my_data_manual_filtered$be001 == 4 ~ 4,  # 离异
            my_data_manual_filtered$be001 == 5 ~ 5,  # 丧偶
            my_data_manual_filtered$be001 == 6 ~ 6,  # 从未结婚
            my_data_manual_filtered$be001 == 7 ~ 7,  # 同居
            TRUE ~ NA_real_
        )
    )
attr(my_data_calculated$householdID, "label") <- "户口ID"
attr(my_data_calculated$communityID, "label") <- "社区ID" 
attr(my_data_calculated$gender, "label") <- "性别"
attr(my_data_calculated$residence_type, "label") <- "居住类型"
attr(my_data_calculated$address_urban_or_rural, "label") <- "城乡地址"
attr(my_data_calculated$address_province, "label") <- "省份"
attr(my_data_calculated$literate, "label") <- "是否识字"
attr(my_data_calculated$martial_status, "label") <- "婚姻状况"

# 导出人口学数据
demographic_data <- my_data_calculated %>%
    select(ID, householdID, communityID, gender, residence_type, address_urban_or_rural, address_province, literate, martial_status)

write_parquet(demographic_data, "data_export/data_calculated/data_calculated_demographic.parquet")

```
### 生理指标计算
```{r 自变量计算}
# 计算收缩压的最终值并添加标签
my_data_calculated <- my_data_calculated %>%
    mutate(
        bp_sbp = rowMeans(select(my_data_manual_filtered, qa003, qa007, qa011), na.rm = TRUE)
    )
attr(my_data_calculated$bp_sbp, "label") <- "收缩压"

# 计算舒张压的最终值并添加标签
my_data_calculated <- my_data_calculated %>%
    mutate(
        bp_dbp = rowMeans(select(my_data_manual_filtered, qa004, qa008, qa012), na.rm = TRUE)
    )
attr(my_data_calculated$bp_dbp, "label") <- "舒张压"

# 计算是否为高血压
my_data_calculated <- my_data_calculated %>%
    mutate(
        hypertension = case_when(
            bp_sbp > 140 | bp_dbp > 90 ~ 1,
            !is.na(bp_sbp) & !is.na(bp_dbp) ~ 0,
            TRUE ~ NA_real_
        )
    )
attr(my_data_calculated$hypertension, "label") <- "是否为高血压"

# 计算是否为低血压并添加标签
my_data_calculated <- my_data_calculated %>%
    mutate(
        hypotension = case_when(
            bp_dbp < 60 | bp_sbp < 90 ~ 1,
            !is.na(bp_sbp) & !is.na(bp_dbp) ~ 0,
            TRUE ~ NA_real_
        )
    )
attr(my_data_calculated$hypotension, "label") <- "是否为低血压"

# 计算脉搏的最终值并添加标签
my_data_calculated <- my_data_calculated %>%
    mutate(
        pulse = round(rowMeans(select(my_data_manual_filtered, qa005, qa009, qa013), na.rm = TRUE))
    )
attr(my_data_calculated$pulse, "label") <- "脉搏"
# 计算是否为心动过速并添加标签
my_data_calculated <- my_data_calculated %>%
    mutate(
        tachycardia = case_when(
            pulse > 100 ~ 1,
            !is.na(pulse) ~ 0,
            TRUE ~ NA_real_
        )
    )
attr(my_data_calculated$tachycardia, "label") <- "是否为心动过速"

# 计算是否为心动过缓并添加标签
my_data_calculated <- my_data_calculated %>%
    mutate(
        bradycardia = case_when(
            pulse < 60 ~ 1,
            !is.na(pulse) ~ 0,
            TRUE ~ NA_real_
        )
    )
attr(my_data_calculated$bradycardia, "label") <- "是否为心动过缓"

# 计算身高并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        height = round((my_data_manual_filtered$qi002), 2))
attr(my_data_calculated$height, "label") <- "身高"

# 计算体重并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        weight = round((my_data_manual_filtered$ql002), 2)
    )
attr(my_data_calculated$weight, "label") <- "体重"

# 计算BMI并添加标签
my_data_calculated <- my_data_calculated %>%
    mutate(
        bmi = round(weight / (height / 100)^2, 2)
    )
attr(my_data_calculated$bmi, "label") <- "体质指数 (BMI)"

# 计算腰围并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        waist_circumference = round((my_data_manual_filtered$qm002), 2)
    )
attr(my_data_calculated$waist_circumference, "label") <- "腰围"

# 计算白细胞计数并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        white_blood_cell = round((my_data_manual_filtered$bl_wbc), 2)
    )
attr(my_data_calculated$white_blood_cell, "label") <- "白细胞计数"

# 计算红细胞压积并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        hematocrit = round((my_data_manual_filtered$bl_hct), 2)
    )
attr(my_data_calculated$hematocrit, "label") <- "红细胞压积"

# 计算平均红细胞体积并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        mean_corpuscular_volume = round((my_data_manual_filtered$bl_mcv), 2)
    )
attr(my_data_calculated$mean_corpuscular_volume, "label") <- "平均红细胞体积 (MCV)"

## 计算血小板计数并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        platelets = round((my_data_manual_filtered$bl_plt), 2)
    )
attr(my_data_calculated$platelets, "label") <- "血小板计数"

## 计算甘油三酯并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        triglycerides = round((my_data_manual_filtered$bl_tg), 2)
    )
attr(my_data_calculated$triglycerides, "label") <- "甘油三酯 (Triglycerides)"

# 计算肌酐并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        creatinine = round((my_data_manual_filtered$bl_crea), 2)
    )
attr(my_data_calculated$creatinine, "label") <- "肌酐"

# 计算血尿素氮并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        blood_urea_nitrogen = round((my_data_manual_filtered$bl_bun), 2)
    )
attr(my_data_calculated$blood_urea_nitrogen, "label") <- "血尿素氮 (Blood Urea Nitrogen)"

# 计算高密度脂蛋白胆固醇并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        hdl_cholesterol = round((my_data_manual_filtered$bl_hdl), 2)
    )
attr(my_data_calculated$hdl_cholesterol, "label") <- "高密度脂蛋白胆固醇 (HDL Cholesterol)"

# 计算低密度脂蛋白胆固醇并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        ldl_cholesterol = round((my_data_manual_filtered$bl_ldl), 2)
    )
attr(my_data_calculated$ldl_cholesterol, "label") <- "低密度脂蛋白胆固醇 (LDL Cholesterol)"

# 计算总胆固醇并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        total_cholesterol = round((my_data_manual_filtered$bl_cho), 2)
    )
attr(my_data_calculated$total_cholesterol, "label") <- "总胆固醇 (Total Cholesterol)"

# 计算血糖并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        glucose = round((my_data_manual_filtered$bl_glu), 2)
    )
attr(my_data_calculated$glucose, "label") <- "血糖"

# 计算尿酸并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        uric_acid = round((my_data_manual_filtered$bl_ua), 2)
    )
attr(my_data_calculated$uric_acid, "label") <- "尿酸"

# 计算胱抑素C并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        cystatin_c = round((my_data_manual_filtered$bl_cysc), 2)
    )
attr(my_data_calculated$cystatin_c, "label") <- "胱抑素C (Cystatin C)"

# 计算C反应蛋白并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        c_reactive_protein = round((my_data_manual_filtered$bl_crp), 2)
    )
attr(my_data_calculated$c_reactive_protein, "label") <- "C反应蛋白 (C-Reactive Protein)"

# 计算糖化血红蛋白并保留两位小数
my_data_calculated <- my_data_calculated %>%
    mutate(
        glycated_hemoglobin = round((my_data_manual_filtered$bl_hbalc), 2)
    )
attr(my_data_calculated$glycated_hemoglobin, "label") <- "糖化血红蛋白 (Glycated Hemoglobin)"

# 导出生理学指标数据
physiological_data <- my_data_calculated %>%
    select(
        ID, bp_sbp, bp_dbp, hypertension, hypotension,
        pulse, tachycardia, bradycardia,
        height, weight, bmi, waist_circumference,
        white_blood_cell, hematocrit, mean_corpuscular_volume,
        platelets, triglycerides, creatinine,
        blood_urea_nitrogen, hdl_cholesterol, ldl_cholesterol,
        total_cholesterol, glucose, uric_acid,
        cystatin_c, c_reactive_protein, glycated_hemoglobin
    )

write_parquet(physiological_data, "data_export/data_calculated/data_calculated_physiological.parquet")

```
### 家庭结构计算
```{r 家庭结构计算}
# 计算是否有父母健在（没问题）
my_data_calculated <- my_data_calculated %>%
    mutate(
        has_parents_alive = case_when(
            # 检查16个变量是否都为NA
            all(is.na(select(my_data_manual_filtered, 
                starts_with("ca000_w3_2_"), 
                starts_with("ca001_w3_2_"),
                starts_with("ca002_w3_2_"),
                starts_with("ca003_w3_2_"),
                starts_with("ca004_w3_2_"),
                starts_with("ca005_w3_2_"),
                starts_with("ca006_w3_2_"),
                starts_with("ca007_w3_2_")
            ))) ~ NA_real_,
            # 检查是否有任何一个变量取值为1
            rowSums(select(my_data_manual_filtered, 
                starts_with("ca000_w3_2_"), 
                starts_with("ca001_w3_2_"),
                starts_with("ca002_w3_2_"),
                starts_with("ca003_w3_2_"),
                starts_with("ca004_w3_2_"),
                starts_with("ca005_w3_2_"),
                starts_with("ca006_w3_2_"),
                starts_with("ca007_w3_2_")
            ) == 1, na.rm = TRUE) > 0 ~ 1,
            # 其他情况（即所有非NA值都为0）
            TRUE ~ 0
        )
    )
attr(my_data_calculated$has_parents_alive, "label") <- "是否有父母健在"

# 计算健在父母数量（没问题）
my_data_calculated <- my_data_calculated %>%
    mutate(
        num_parents_alive = case_when(
            # 检查16个变量是否都为NA
            all(is.na(select(my_data_manual_filtered, 
                starts_with("ca000_w3_2_"), 
                starts_with("ca001_w3_2_"),
                starts_with("ca002_w3_2_"),
                starts_with("ca003_w3_2_"),
                starts_with("ca004_w3_2_"),
                starts_with("ca005_w3_2_"),
                starts_with("ca006_w3_2_"),
                starts_with("ca007_w3_2_")
            ))) ~ NA_real_,
            # 如果不是全部NA，则计算值为1的数量
            TRUE ~ rowSums(
                select(my_data_manual_filtered, 
                    starts_with("ca000_w3_2_"), 
                    starts_with("ca001_w3_2_"),
                    starts_with("ca002_w3_2_"),
                    starts_with("ca003_w3_2_"),
                    starts_with("ca004_w3_2_"),
                    starts_with("ca005_w3_2_"),
                    starts_with("ca006_w3_2_"),
                    starts_with("ca007_w3_2_")
                ) == 1,
                na.rm = TRUE
            )
        )
    )
attr(my_data_calculated$num_parents_alive, "label") <- "健在父母数量"

# 计算子女数量（没问题）
my_data_calculated <- my_data_calculated %>%
    mutate(
        num_children = my_data_manual_filtered$xchildnum
    )
attr(my_data_calculated$num_children, "label") <- "子女数量"

# 计算健在子女数量（没问题，可如果只计算总量，每个人的孩子总数也不一样，是不是比例作为自变量更合适）
my_data_calculated <- my_data_calculated %>%
    mutate(
        totalnum_children_alive = case_when(
            is.na(my_data_manual_filtered$xchildnum_alive) & is.na(my_data_manual_filtered$cb051_w3_1) ~ NA_real_,
            TRUE ~ coalesce(my_data_manual_filtered$xchildnum_alive, 0) + coalesce(my_data_manual_filtered$cb051_w3_1, 0)
        )
    )
attr(my_data_calculated$totalnum_children_alive, "label") <- "健在子女数量"

# 计算已婚子女比例（没问题）
my_data_calculated <- my_data_calculated %>%
    mutate(
        num_children_married = case_when(
            # 检查是否所有值都是NA
            all(is.na(select(my_data_manual_filtered, starts_with("cb063_")))) ~ NA_real_,
            # 否则计算非NA值的总和
            TRUE ~ rowSums(
                select(my_data_manual_filtered, starts_with("cb063_")) %>%
                mutate_all(~case_when(
                    . == 1 ~ 1,  # 已婚记为1
                    !is.na(.) ~ 0,  # 其他非NA值记为0
                    TRUE ~ NA_real_  # NA保持为NA
                )),
                na.rm = TRUE  # 忽略部分NA值
            )
        ),
        married_children_ratio = case_when(
            is.na(num_children_married) | is.na(totalnum_children_alive) ~ NA_real_,
            totalnum_children_alive == 0 ~ 0,
            TRUE ~ num_children_married / totalnum_children_alive
        )
    )
attr(my_data_calculated$married_children_ratio, "label") <- "已婚子女比例"

# 计算孙子女数量（没问题）
my_data_calculated <- my_data_calculated %>%
    mutate(
        total_number_grandchildren = case_when(
            # 检查是否所有值都是NA
            all(is.na(select(my_data_manual_filtered, starts_with("cb065_")))) ~ NA_real_,
            # 否则计算非NA值的总和
            TRUE ~ rowSums(
                select(my_data_manual_filtered, starts_with("cb065_")) %>%
                mutate_all(as.numeric),
                na.rm = TRUE  # 忽略部分NA值
            )
        )
    )
attr(my_data_calculated$total_number_grandchildren, "label") <- "孙子女总数"

# 计算重孙子女数量（没问题）
my_data_calculated <- my_data_calculated %>%
    mutate(
        total_number_great_grandchildren = case_when(
            # 检查是否所有值都是NA
            all(is.na(select(my_data_manual_filtered, starts_with("cb067_")))) ~ NA_real_,
            # 否则计算非NA值的总和
            TRUE ~ rowSums(
                select(my_data_manual_filtered, starts_with("cb067_")) %>%
                mutate_all(as.numeric),
                na.rm = TRUE  # 忽略部分NA值
            )
        )
    )
attr(my_data_calculated$total_number_great_grandchildren, "label") <- "重孙子女总数"

# 导出家庭结构数据
family_structure_data <- my_data_calculated %>%
    select(
        ID, has_parents_alive, num_parents_alive, num_children, totalnum_children_alive,
        married_children_ratio, total_number_grandchildren,
        total_number_great_grandchildren
    )
write_parquet(family_structure_data, "data_export/data_calculated/data_calculated_family_structure.parquet")
```

### 照顾负担计算
```{r 照顾负担计算}
# 计算照顾父母数量（没问题，但这个是个反面变量，数字越大可能内在能力越不行，这个在后续建模中要注意一下）
my_data_calculated <- my_data_calculated %>%
    mutate(
        number_care_parents = case_when(
            # 检查是否所有值都是NA
            all(is.na(select(my_data_manual_filtered, starts_with("ca026_w3_")))) ~ NA_real_,
            # 否则计算非NA值的总和
            TRUE ~ rowSums(
                select(my_data_manual_filtered, starts_with("ca026_w3_")) %>%
                mutate_all(~case_when(
                    . == 1 ~ 0,  # yes记为0
                    . == 2 ~ 1,   # no记为1
                    TRUE ~ NA_real_  # 其他值记为NA
                )),
                na.rm = TRUE  # 忽略部分NA值
            )
        )
    )
attr(my_data_calculated$number_care_parents, "label") <- "照顾父母数量"

# 计算照顾子女数量（没问题，但和上面一个变量一样的问题）
my_data_calculated <- my_data_calculated %>%
    mutate(
        number_takecare_children = case_when(
            # 检查是否所有值都是NA
            all(is.na(select(my_data_manual_filtered, starts_with("cb063_w3_6_")))) ~ NA_real_,
            # 否则计算非NA值的总和
            TRUE ~ rowSums(
                select(my_data_manual_filtered, starts_with("cb063_w3_6_")) %>%
                mutate_all(~case_when(
                    . == 1 ~ 0,  # yes记为0
                    . == 2 ~ 1,  # no记为1
                    TRUE ~ NA_real_  # 其他值记为NA
                )),
                na.rm = TRUE  # 忽略部分NA值
            )
        )
    )
attr(my_data_calculated$number_takecare_children, "label") <- "照顾子女数量"

# 计算是否带孙子女（没问题，这个取值和之前照顾父母孩子是相反的）
my_data_calculated <- my_data_calculated %>%
    mutate(
        takecare_grandchildren = case_when(
            is.na(my_data_manual_filtered$cf001) ~ NA_real_,
            my_data_manual_filtered$cf001 == 1 ~ 1,  # yes记为1
            my_data_manual_filtered$cf001 == 2 ~ 0,  # no记为0
            TRUE ~ NA_real_  # 其他值记为NA
        )
    )
attr(my_data_calculated$takecare_grandchildren, "label") <- "是否照顾孙子女"

# 计算照顾孙子女总时间（还得根据是否照顾确定取值吧）
my_data_calculated <- my_data_calculated %>%
    mutate(
        takecare_grandchildren_hours = case_when(
            # 首先判断是否照顾孙子女
            takecare_grandchildren == 0 ~ 0,
            takecare_grandchildren == 1 ~ case_when(
                # 如果两个数值相乘的结果都是NA，则返回NA
                all(
                    (is.na(my_data_manual_filtered$cf003_1_1_) | is.na(my_data_manual_filtered$cf003_2_1_)) &
                    (is.na(my_data_manual_filtered$cf003_1_2_) | is.na(my_data_manual_filtered$cf003_2_2_)) &
                    (is.na(my_data_manual_filtered$cf003_1_3_) | is.na(my_data_manual_filtered$cf003_2_3_)) &
                    (is.na(my_data_manual_filtered$cf003_1_4_) | is.na(my_data_manual_filtered$cf003_2_4_)) &
                    (is.na(my_data_manual_filtered$cf003_1_5_) | is.na(my_data_manual_filtered$cf003_2_5_)) &
                    (is.na(my_data_manual_filtered$cf003_1_6_) | is.na(my_data_manual_filtered$cf003_2_6_)) &
                    (is.na(my_data_manual_filtered$cf003_1_7_) | is.na(my_data_manual_filtered$cf003_2_7_)) &
                    (is.na(my_data_manual_filtered$cf003_1_8_) | is.na(my_data_manual_filtered$cf003_2_8_)) &
                    (is.na(my_data_manual_filtered$cf003_1_9_) | is.na(my_data_manual_filtered$cf003_2_9_)) &
                    (is.na(my_data_manual_filtered$cf003_1_10_) | is.na(my_data_manual_filtered$cf003_2_10_)) &
                    (is.na(my_data_manual_filtered$cf003_1_11_) | is.na(my_data_manual_filtered$cf003_2_11_)) &
                    (is.na(my_data_manual_filtered$cf003_1_13_) | is.na(my_data_manual_filtered$cf003_2_13_))
                ) ~ NA_real_,
                # 否则计算乘积
                TRUE ~ rowSums(
                    cbind(
                        my_data_manual_filtered$cf003_2_1_ * my_data_manual_filtered$cf003_1_1_,
                        my_data_manual_filtered$cf003_2_2_ * my_data_manual_filtered$cf003_1_2_,
                        my_data_manual_filtered$cf003_2_3_ * my_data_manual_filtered$cf003_1_3_,
                        my_data_manual_filtered$cf003_2_4_ * my_data_manual_filtered$cf003_1_4_,
                        my_data_manual_filtered$cf003_2_5_ * my_data_manual_filtered$cf003_1_5_,
                        my_data_manual_filtered$cf003_2_6_ * my_data_manual_filtered$cf003_1_6_,
                        my_data_manual_filtered$cf003_2_7_ * my_data_manual_filtered$cf003_1_7_,
                        my_data_manual_filtered$cf003_2_8_ * my_data_manual_filtered$cf003_1_8_,
                        my_data_manual_filtered$cf003_2_9_ * my_data_manual_filtered$cf003_1_9_,
                        my_data_manual_filtered$cf003_2_10_ * my_data_manual_filtered$cf003_1_10_,
                        my_data_manual_filtered$cf003_2_11_ * my_data_manual_filtered$cf003_1_11_,
                        my_data_manual_filtered$cf003_2_13_ * my_data_manual_filtered$cf003_1_13_),
                    na.rm = TRUE
                )
            ),
            # 如果takecare_grandchildren是NA，返回NA
            is.na(takecare_grandchildren) ~ NA_real_
        )
    )
attr(my_data_calculated$takecare_grandchildren_hours, "label") <- "照顾孙子女总小时数"

# 计算是否照顾岳父母（没问题）
my_data_calculated <- my_data_calculated %>%
    mutate(
        takecare_parents = case_when(
            is.na(my_data_manual_filtered$cf004) ~ NA_real_,
            my_data_manual_filtered$cf004 == 1 ~ 1,  # yes记为1
            my_data_manual_filtered$cf004 == 2 ~ 0,  # no记为0
            TRUE ~ NA_real_  # 其他值记为NA
        )
    )
attr(my_data_calculated$takecare_parents, "label") <- "是否照顾岳父母"

## 计算照顾父母总小时数（计算没问题，但是不是应该包括养父养母）
my_data_calculated <- my_data_calculated %>%
    mutate(
        takecare_parents_hours = case_when(
            # 检查是否所有相关变量都是NA
            all(
                (is.na(my_data_manual_filtered$cf005_1) | is.na(my_data_manual_filtered$cf005_2)) &
                (is.na(my_data_manual_filtered$cf005_3) | is.na(my_data_manual_filtered$cf005_4)) &
                (is.na(my_data_manual_filtered$cf005_5) | is.na(my_data_manual_filtered$cf005_6)) &
                (is.na(my_data_manual_filtered$cf005_7) | is.na(my_data_manual_filtered$cf005_8))
            ) ~ NA_real_,
            # 否则计算照顾父母的总时间
            TRUE ~ rowSums(
                cbind(
                    my_data_manual_filtered$cf005_1 * my_data_manual_filtered$cf005_2,
                    my_data_manual_filtered$cf005_3 * my_data_manual_filtered$cf005_4,
                    my_data_manual_filtered$cf005_5 * my_data_manual_filtered$cf005_6,
                    my_data_manual_filtered$cf005_7 * my_data_manual_filtered$cf005_8
                ),
                na.rm = TRUE  # 忽略部分NA值
            )
        )
    )
attr(my_data_calculated$takecare_parents_hours, "label") <- "照顾父母及岳父岳母总小时数"

# 导出照顾负担数据
caregiving_burden_data <- my_data_calculated %>%
    select(
        ID, number_care_parents, number_takecare_children,
        takecare_grandchildren, takecare_grandchildren_hours,
        takecare_parents, takecare_parents_hours
    )

write_parquet(caregiving_burden_data, "data_export/data_calculated/data_calculated_caregiving_burden.parquet")
```

### 医疗保险计算
```{r 医疗保险计算}
# 医疗保健
## 计算无医疗保险原因（没问题）
my_data_calculated <- my_data_calculated %>%
    mutate(
        reason_no_health_insurance = case_when(
            is.na(my_data_manual_filtered$ea009) ~ NA_real_,
            my_data_manual_filtered$ea009 == 1 ~ 1,
            my_data_manual_filtered$ea009 == 2 ~ 2,
            my_data_manual_filtered$ea009 == 3 ~ 3,
            my_data_manual_filtered$ea009 == 4 ~ 4,
            my_data_manual_filtered$ea009 == 5 ~ 5,
            my_data_manual_filtered$ea009 == 6 ~ 6,
            my_data_manual_filtered$ea009 == 7 ~ 7,
            TRUE ~ NA_real_
        )
    )
attr(my_data_calculated$reason_no_health_insurance, "label") <- "无医疗保险原因"

## 计算城镇职工医疗保险
my_data_calculated <- my_data_calculated %>%
    mutate(
        urban_employee_medical_insurance = case_when(
            # 如果ea001_w3_1_1_或ea001_w3_3_1_任一为1，则记为1
            my_data_manual_filtered$ea001_w3_1_1_ == 1 | 
            my_data_manual_filtered$ea001_w3_3_1_ == 1 ~ 1,
            
            # 如果两者都为2，则记为0
            my_data_manual_filtered$ea001_w3_1_1_ == 2 & 
            my_data_manual_filtered$ea001_w3_3_1_ == 2 ~ 0,
            
            # 如果两者都为NA，则记为NA
            is.na(my_data_manual_filtered$ea001_w3_1_1_) & 
            is.na(my_data_manual_filtered$ea001_w3_3_1_) ~ NA_real_,
            
            # 其他情况记为0
            TRUE ~ 0
        )
    )
attr(my_data_calculated$urban_employee_medical_insurance, "label") <- "城镇职工医疗保险"

## 计算城镇居民医疗保险
my_data_calculated <- my_data_calculated %>%
    mutate(
        urban_resident_medical_insurance = case_when(
            # 如果ea001_w3_1_2_或ea001_w3_3_2_任一为1，则记为1
            my_data_manual_filtered$ea001_w3_1_2_ == 1 | 
            my_data_manual_filtered$ea001_w3_3_2_ == 1 ~ 1,
            
            # 如果两者都为2，则记为0
            my_data_manual_filtered$ea001_w3_1_2_ == 2 & 
            my_data_manual_filtered$ea001_w3_3_2_ == 2 ~ 0,
            
            # 如果两者都为NA，则记为NA
            is.na(my_data_manual_filtered$ea001_w3_1_2_) & 
            is.na(my_data_manual_filtered$ea001_w3_3_2_) ~ NA_real_,
            
            # 其他情况记为0
            TRUE ~ 0
        )
    )
attr(my_data_calculated$urban_resident_medical_insurance, "label") <- "城镇居民医疗保险"

## 计算合作医疗医疗保险
my_data_calculated <- my_data_calculated %>%
    mutate(
        hezuoyiliao_medical_insurance = case_when(
            # 如果ea001_w3_1_3_或ea001_w3_3_3_任一为1，则记为1
            my_data_manual_filtered$ea001_w3_1_3_ == 1 | 
            my_data_manual_filtered$ea001_w3_3_3_ == 1 ~ 1,
            
            # 如果两者都为2，则记为0
            my_data_manual_filtered$ea001_w3_1_3_ == 2 & 
            my_data_manual_filtered$ea001_w3_3_3_ == 2 ~ 0,
            
            # 如果两者都为NA，则记为NA
            is.na(my_data_manual_filtered$ea001_w3_1_3_) & 
            is.na(my_data_manual_filtered$ea001_w3_3_3_) ~ NA_real_,
            
            # 其他情况记为0
            TRUE ~ 0
        )
    )
attr(my_data_calculated$hezuoyiliao_medical_insurance, "label") <- "合作医疗医疗保险"

## 计算城乡居民医疗保险
my_data_calculated <- my_data_calculated %>%
    mutate(
        urbanandruralresident_medical_insurance = case_when(
            # 如果ea001_w3_1_4_或ea001_w3_3_4_任一为1，则记为1
            my_data_manual_filtered$ea001_w3_1_4_ == 1 | 
            my_data_manual_filtered$ea001_w3_3_4_ == 1 ~ 1,
            
            # 如果两者都为2，则记为0
            my_data_manual_filtered$ea001_w3_1_4_ == 2 & 
            my_data_manual_filtered$ea001_w3_3_4_ == 2 ~ 0,
            
            # 如果两者都为NA，则记为NA
            is.na(my_data_manual_filtered$ea001_w3_1_4_) & 
            is.na(my_data_manual_filtered$ea001_w3_3_4_) ~ NA_real_,
            
            # 其他情况记为0
            TRUE ~ 0
        )
    )
attr(my_data_calculated$urbanandruralresident_medical_insurance, "label") <- "城乡居民医疗保险"

## 计算公费医疗保险
my_data_calculated <- my_data_calculated %>%
    mutate(
        gongfei_medical_insurance = case_when(
            # 如果ea001_w3_1_5_或ea001_w3_3_5_任一为1，则记为1
            my_data_manual_filtered$ea001_w3_1_5_ == 1 | 
            my_data_manual_filtered$ea001_w3_3_5_ == 1 ~ 1,
            
            # 如果两者都为2，则记为0
            my_data_manual_filtered$ea001_w3_1_5_ == 2 & 
            my_data_manual_filtered$ea001_w3_3_5_ == 2 ~ 0,
            
            # 如果两者都为NA，则记为NA
            is.na(my_data_manual_filtered$ea001_w3_1_5_) & 
            is.na(my_data_manual_filtered$ea001_w3_3_5_) ~ NA_real_,
            
            # 其他情况记为0
            TRUE ~ 0
        )
    )
attr(my_data_calculated$gongfei_medical_insurance, "label") <- "公费医疗保险"


## 计算私人医疗保险（单位）
my_data_calculated <- my_data_calculated %>%
    mutate(
        privatemedical_insurance_workunit = case_when(
            # 如果ea001_w3_1_7_或ea001_w3_3_7_任一为1，则记为1
            my_data_manual_filtered$ea001_w3_1_7_ == 1 | 
            my_data_manual_filtered$ea001_w3_3_7_ == 1 ~ 1,
            
            # 如果两者都为2，则记为0
            my_data_manual_filtered$ea001_w3_1_7_ == 2 & 
            my_data_manual_filtered$ea001_w3_3_7_ == 2 ~ 0,
            
            # 如果两者都为NA，则记为NA
            is.na(my_data_manual_filtered$ea001_w3_1_7_) & 
            is.na(my_data_manual_filtered$ea001_w3_3_7_) ~ NA_real_,
            
            # 其他情况记为0
            TRUE ~ 0
        )
    )
attr(my_data_calculated$privatemedical_insurance_workunit, "label") <- "商业医疗保险公司"

## 计算私人医疗保险（个人）
my_data_calculated <- my_data_calculated %>%
    mutate(
        privatemedical_insurance_individual = case_when(
            # 如果ea001_w3_1_8_或ea001_w3_3_8_任一为1，则记为1
            my_data_manual_filtered$ea001_w3_1_8_ == 1 | 
            my_data_manual_filtered$ea001_w3_3_8_ == 1 ~ 1,
            
            # 如果两者都为2，则记为0
            my_data_manual_filtered$ea001_w3_1_8_ == 2 & 
            my_data_manual_filtered$ea001_w3_3_8_ == 2 ~ 0,
            
            # 如果两者都为NA，则记为NA
            is.na(my_data_manual_filtered$ea001_w3_1_8_) & 
            is.na(my_data_manual_filtered$ea001_w3_3_8_) ~ NA_real_,
            
            # 其他情况记为0
            TRUE ~ 0
        )
    )
attr(my_data_calculated$privatemedical_insurance_individual, "label") <- "商业医疗保险个人"

## 计算城镇非从业居民医疗保险
my_data_calculated <- my_data_calculated %>%
    mutate(
        urban_nonemployed_persons_healthinsuran = case_when(
            # 如果ea001_w3_1_9_或ea001_w3_3_9_任一为1，则记为1
            my_data_manual_filtered$ea001_w3_1_9_ == 1 | 
            my_data_manual_filtered$ea001_w3_3_9_ == 1 ~ 1,
            
            # 如果两者都为2，则记为0
            my_data_manual_filtered$ea001_w3_1_9_ == 2 & 
            my_data_manual_filtered$ea001_w3_3_9_ == 2 ~ 0,
            
            # 如果两者都为NA，则记为NA
            is.na(my_data_manual_filtered$ea001_w3_1_9_) & 
            is.na(my_data_manual_filtered$ea001_w3_3_9_) ~ NA_real_,
            
            # 其他情况记为0
            TRUE ~ 0
        )
    )
attr(my_data_calculated$urban_nonemployed_persons_healthinsuran, "label") <- "城镇非从业居民医疗保险"

## 计算其他医疗保险
my_data_calculated <- my_data_calculated %>%
    mutate(
        others_medical_insurance = case_when(
            # 如果ea001_w3_1_10_或ea001_w3_3_10_任一为1，则记为1
            my_data_manual_filtered$ea001_w3_1_10_ == 1 | 
            my_data_manual_filtered$ea001_w3_3_10_ == 1 ~ 1,
            
            # 如果两者都为2，则记为0
            my_data_manual_filtered$ea001_w3_1_10_ == 2 & 
            my_data_manual_filtered$ea001_w3_3_10_ == 2 ~ 0,
            
            # 如果两者都为NA，则记为NA
            is.na(my_data_manual_filtered$ea001_w3_1_10_) & 
            is.na(my_data_manual_filtered$ea001_w3_3_10_) ~ NA_real_,
            
            # 其他情况记为0
            TRUE ~ 0
        )
    )
attr(my_data_calculated$others_medical_insurance, "label") <- "其他医疗保险"

## 计算过去两年是否体检
my_data_calculated <- my_data_calculated %>%
    mutate(
        undergone_physicalexamination_past_two_years = case_when(
            is.na(my_data_manual_filtered$ec001) ~ NA_real_,
            my_data_manual_filtered$ec001 == 1 ~ 1,
            TRUE ~ 0
        )
    )
attr(my_data_calculated$undergone_physicalexamination_past_two_years, "label") <- "过去两年是否体检"

## 计算过去一个月是否去住院
my_data_calculated <- my_data_calculated %>%
    mutate(
        visithospital_lastmonth = case_when(
            is.na(my_data_manual_filtered$ed001) ~ NA_real_,
            my_data_manual_filtered$ed001 == 1 ~ 1,  # yes记为1
            my_data_manual_filtered$ed001 == 2 ~ 0,  # no记为0
            TRUE ~ NA_real_  # 其他值记为NA
        )
    )
attr(my_data_calculated$visithospital_lastmonth, "label") <- "过去一个月是否去住院"

## 计算过去一个月是否生病
my_data_calculated <- my_data_calculated %>%
    mutate(
        ill_lastmonth = case_when(
            is.na(my_data_manual_filtered$ed002) ~ NA_real_,
            my_data_manual_filtered$ed002 == 1 ~ 1,  # yes记为1
            my_data_manual_filtered$ed002 == 2 ~ 0,  # no记为0
            TRUE ~ NA_real_  # 其他值记为NA
        )
    )
attr(my_data_calculated$ill_lastmonth, "label") <- "过去一个月是否生病"

## 计算未就医原因
my_data_calculated <- my_data_calculated %>%
    mutate(
        reason_not_seeking_medical_attention = case_when(
            is.na(my_data_manual_filtered$ed003) ~ NA_real_,
            my_data_manual_filtered$ed003 == 1 ~ 1,
            my_data_manual_filtered$ed003 == 2 ~ 2,
            my_data_manual_filtered$ed003 == 3 ~ 3,
            my_data_manual_filtered$ed003 == 4 ~ 4,
            my_data_manual_filtered$ed003 == 5 ~ 5,
            my_data_manual_filtered$ed003 == 6 ~ 6,
            my_data_manual_filtered$ed003 == 7 ~ 7,
            my_data_manual_filtered$ed003 == 8 ~ 8,
            TRUE ~ NA_real_
        )
    )
attr(my_data_calculated$reason_not_seeking_medical_attention, "label") <- "未就医原因"

## 计算过去一个月去门诊次数
my_data_calculated <- my_data_calculated %>%
    mutate(
        times_visited_outpatient = case_when(
            # 检查是否所有相关变量都是NA
            all(is.na(select(my_data_manual_filtered, 
                starts_with("ed005_")))) ~ NA_real_,
            # 否则计算总次数
            TRUE ~ rowSums(
                select(my_data_manual_filtered, 
                    ed005_1_, ed005_2_, ed005_3_, 
                    ed005_4_, ed005_5_, ed005_6_, 
                    ed005_7_),
                na.rm = TRUE
            )
        )
    )
attr(my_data_calculated$times_visited_outpatient, "label") <- "过去一个月去门诊次数"

## 计算门诊是否付费
my_data_calculated <- my_data_calculated %>%
    mutate(
        payfor_outpatient = case_when(
            my_data_manual_filtered$ed006 == 1 ~ 1,
            my_data_manual_filtered$ed006 == 2 ~ 0,
            TRUE ~ 0  # NA和其他值都记为0
        )
    )
attr(my_data_calculated$payfor_outpatient, "label") <- "门诊是否付费"

## 计算门诊费用支付金额
my_data_calculated <- my_data_calculated %>%
    mutate(
        amountpayfor_outpatient = case_when(
            is.na(my_data_manual_filtered$ed006_1) ~ 0,
            TRUE ~ my_data_manual_filtered$ed006_1
        )
    )
attr(my_data_calculated$amountpayfor_outpatient, "label") <- "门诊费用支付金额"

## 计算自费门诊费用
my_data_calculated <- my_data_calculated %>%
    mutate(
        self_payfor_outpatient = case_when(
            my_data_manual_filtered$ed007 == 1 ~ 1,
            my_data_manual_filtered$ed007 == 2 ~ 0,
            TRUE ~ 0  # NA和其他值都记为0
        )
    )
attr(my_data_calculated$self_payfor_outpatient, "label") <- "门诊是否自费"

## 计算自费门诊费用金额
my_data_calculated <- my_data_calculated %>%
    mutate(
        amountself_payfor_outpatient = case_when(
            is.na(my_data_manual_filtered$ed007_1) ~ 0,
            TRUE ~ my_data_manual_filtered$ed007_1
        )
    )
attr(my_data_calculated$amountself_payfor_outpatient, "label") <- "自费门诊费用金额"

## 计算自费门诊费用占比
my_data_calculated <- my_data_calculated %>%
    mutate(
        self_outpatient_payment_percent = case_when(
            amountpayfor_outpatient == 0 ~ 0,
            TRUE ~ amountself_payfor_outpatient / amountpayfor_outpatient
        )
    )
attr(my_data_calculated$self_outpatient_payment_percent, "label") <- "自费门诊费用占比"

## 计算去门诊所需时间
my_data_calculated <- my_data_calculated %>%
    mutate(
        travel_time_outpatient = case_when(
            is.na(my_data_manual_filtered$ed014_1) ~ NA_real_,
            TRUE ~ my_data_manual_filtered$ed014_1
        )
    )
attr(my_data_calculated$travel_time_outpatient, "label") <- "去门诊所需时间"

## 计算去门诊费用
my_data_calculated <- my_data_calculated %>%
    mutate(
        travel_cost_outpatient = case_when(
            is.na(my_data_manual_filtered$ed015) ~ NA_real_,
            TRUE ~ my_data_manual_filtered$ed015
        )
    )
attr(my_data_calculated$travel_cost_outpatient, "label") <- "去门诊费用"

## 计算是否为急诊
my_data_calculated <- my_data_calculated %>%
    mutate(
        emergency_outpatient = case_when(
            my_data_manual_filtered$ed020 == 2 ~ 1,
            TRUE ~ 0  # 其他情况包括NA都记为0
        )
    )
attr(my_data_calculated$emergency_outpatient, "label") <- "是否为急诊"

## 计算过去一年是否住院
my_data_calculated <- my_data_calculated %>%
    mutate(
        inpatientcare_pastyear = case_when(
            my_data_manual_filtered$ee003 == 1 ~ 1,
            TRUE ~ 0  # 其他情况包括NA都记为0
        )
    )
attr(my_data_calculated$inpatientcare_pastyear, "label") <- "过去一年是否住院"

## 计算过去一年住院次数
my_data_calculated <- my_data_calculated %>%
    mutate(
        times_inpatientcare_pastyear = case_when(
            is.na(my_data_manual_filtered$ee004) ~ 0,
            TRUE ~ my_data_manual_filtered$ee004
        )
    )
attr(my_data_calculated$times_inpatientcare_pastyear, "label") <- "过去一年住院次数"

## 计算过去一年住院次数
my_data_calculated <- my_data_calculated %>%
    mutate(
        times_inpatientcare_pastyear = case_when(
            is.na(my_data_manual_filtered$ee004) ~ 0,
            TRUE ~ my_data_manual_filtered$ee004
        )
    )
attr(my_data_calculated$times_inpatientcare_pastyear, "label") <- "过去一年住院次数"

## 计算过去一年是否付费
my_data_calculated <- my_data_calculated %>%
    mutate(
        payfor_inpatientcare_pastyear = case_when(
            my_data_manual_filtered$ee005 == 1 ~ 1,
            TRUE ~ 0  # 其他情况包括NA都记为0
        )
    )
attr(my_data_calculated$payfor_inpatientcare_pastyear, "label") <- "过去一年住院是否付费"

## 计算过去一年住院费用支付金额
my_data_calculated <- my_data_calculated %>%
    mutate(
        amountpayfor_inpatientcare_pastyear = case_when(
            is.na(my_data_manual_filtered$ee005_1) ~ 0,
            TRUE ~ my_data_manual_filtered$ee005_1
        )
    )
attr(my_data_calculated$amountpayfor_inpatientcare_pastyear, "label") <- "过去一年住院费用支付金额"

## 计算过去一年住院是否自费
my_data_calculated <- my_data_calculated %>%
    mutate(
        self_payfor_inpatientcare = case_when(
            my_data_manual_filtered$ee006 == 1 ~ 1,
            TRUE ~ 0  # 其他情况包括NA都记为0
        )
    )
attr(my_data_calculated$self_payfor_inpatientcare, "label") <- "过去一年住院是否自费"

## 计算过去一年住院自费金额
my_data_calculated <- my_data_calculated %>%
    mutate(
        amountself_payfor_inpatientcare = case_when(
            is.na(my_data_manual_filtered$ee006_1) ~ 0,
            TRUE ~ my_data_manual_filtered$ee006_1
        )
    )
attr(my_data_calculated$amountself_payfor_inpatientcare, "label") <- "过去一年住院自费金额"

## 计算过去一年住院自费占比（如果自费是na目前的代码会算出na吗？）
my_data_calculated <- my_data_calculated %>%
    mutate(
        self_inpatientcare_payment_percent = case_when(
            amountpayfor_inpatientcare_pastyear == 0 ~ 0,
            TRUE ~ amountself_payfor_inpatientcare / amountpayfor_inpatientcare_pastyear
        )
    )
attr(my_data_calculated$self_inpatientcare_payment_percent, "label") <- "过去一年住院自费占比"

## 计算去住院所需时间
my_data_calculated <- my_data_calculated %>%
    mutate(
        travel_time_inpatientcare = case_when(
            is.na(my_data_manual_filtered$ee014_1) ~ NA_real_,
            TRUE ~ my_data_manual_filtered$ee014_1
        )
    )
attr(my_data_calculated$travel_time_inpatientcare, "label") <- "去住院所需时间"

## 计算去住院费用
my_data_calculated <- my_data_calculated %>%
    mutate(
        travel_cost_inpatientcare = case_when(
            is.na(my_data_manual_filtered$ee015) ~ NA_real_,
            TRUE ~ my_data_manual_filtered$ee015
        )
    )
attr(my_data_calculated$travel_cost_inpatientcare, "label") <- "去住院费用"

## 计算过去一年住院天数
my_data_calculated <- my_data_calculated %>%
    mutate(
        nights_inpatientcare = case_when(
            is.na(my_data_manual_filtered$ee016) ~ 0,
            TRUE ~ my_data_manual_filtered$ee016
        )
    )
attr(my_data_calculated$nights_inpatientcare, "label") <- "过去一年住院天数"

## 计算住院原因
my_data_calculated <- my_data_calculated %>%
    mutate(
        reasons_inpatientcare = case_when(
            is.na(my_data_manual_filtered$ee019) ~ NA_real_,
            my_data_manual_filtered$ee019 == 1 ~ 1,
            my_data_manual_filtered$ee019 == 2 ~ 2,
            my_data_manual_filtered$ee019 == 3 ~ 3,
            my_data_manual_filtered$ee019 == 4 ~ 4,
            TRUE ~ NA_real_
        )
    )
attr(my_data_calculated$reasons_inpatientcare, "label") <- "住院原因"

## 计算自我治疗费用
my_data_calculated <- my_data_calculated %>%
    mutate(
        cost_self_treatment = case_when(
            # 检查是否所有相关变量都是NA
            all(is.na(select(my_data_manual_filtered, 
                ef002_1_1_, ef002_1_2_, ef002_1_3_,
                ef002_1_4_, ef002_1_5_, ef002_1_6_))) ~ NA_real_,
            # 否则计算总和
            TRUE ~ rowSums(
                select(my_data_manual_filtered, 
                    ef002_1_1_, ef002_1_2_, ef002_1_3_,
                    ef002_1_4_, ef002_1_5_, ef002_1_6_),
                na.rm = TRUE
            )
        )
    )
attr(my_data_calculated$cost_self_treatment, "label") <- "自我治疗费用"

## 计算是否看牙医
my_data_calculated <- my_data_calculated %>%
    mutate(
        see_dentalcare = case_when(
            is.na(my_data_manual_filtered$eh001) ~ NA_real_,
            my_data_manual_filtered$eh001 == 1 ~ 1,
            my_data_manual_filtered$eh001 == 2 ~ 0,
            TRUE ~ NA_real_
        )
    )
attr(my_data_calculated$see_dentalcare, "label") <- "是否看牙医"


## 计算看牙医次数
my_data_calculated <- my_data_calculated %>%
    mutate(
        times_dentalcare = case_when(
            is.na(my_data_manual_filtered$eh002) ~ 0,
            TRUE ~ my_data_manual_filtered$eh002
        )
    )
attr(my_data_calculated$times_dentalcare, "label") <- "看牙医次数"

## 计算是否付费看牙医
my_data_calculated <- my_data_calculated %>%
    mutate(
        payfor_dentalcare = case_when(
            is.na(my_data_manual_filtered$eh003) ~ NA_real_,
            my_data_manual_filtered$eh003 == 1 ~ 1,
            my_data_manual_filtered$eh003 == 2 ~ 0,
            TRUE ~ NA_real_
        )
    )
attr(my_data_calculated$payfor_dentalcare, "label") <- "是否付费看牙医"


## 计算牙科费用
my_data_calculated <- my_data_calculated %>%
    mutate(
        cost_dentalcare = case_when(
            is.na(my_data_manual_filtered$eh003_1) ~ 0,
            TRUE ~ my_data_manual_filtered$eh003_1
        )
    )
attr(my_data_calculated$cost_dentalcare, "label") <- "牙科费用"

## 计算就医满意度
my_data_calculated <- my_data_calculated %>%
    mutate(
        satisfaction_healthcare = case_when(
            is.na(my_data_manual_filtered$eh007_w3) ~ NA_real_,
            my_data_manual_filtered$eh007_w3 == 1 ~ 1,
            my_data_manual_filtered$eh007_w3 == 2 ~ 2,
            TRUE ~ NA_real_
        )
    )
attr(my_data_calculated$satisfaction_healthcare, "label") <- "就医满意度"

# 导出医疗保险相关数据
medical_insurance_data <- my_data_calculated %>%
    select(
        ID, reason_no_health_insurance,
        urban_employee_medical_insurance,
        urban_resident_medical_insurance,
        hezuoyiliao_medical_insurance,
        urbanandruralresident_medical_insurance,
        gongfei_medical_insurance,
        privatemedical_insurance_workunit,
        privatemedical_insurance_individual,
        urban_nonemployed_persons_healthinsuran,
        others_medical_insurance,
        undergone_physicalexamination_past_two_years,
        visithospital_lastmonth,
        ill_lastmonth,
        reason_not_seeking_medical_attention,
        times_visited_outpatient,
        payfor_outpatient,
        amountpayfor_outpatient,
        self_payfor_outpatient,
        amountself_payfor_outpatient,
        self_outpatient_payment_percent,
        travel_time_outpatient,
        travel_cost_outpatient,
        emergency_outpatient,
        inpatientcare_pastyear,
        times_inpatientcare_pastyear,
        payfor_inpatientcare_pastyear,
        amountpayfor_inpatientcare_pastyear,
        self_payfor_inpatientcare,
        amountself_payfor_inpatientcare,
        self_inpatientcare_payment_percent,
        travel_time_inpatientcare,
        travel_cost_inpatientcare,
        nights_inpatientcare,
        reasons_inpatientcare,
        cost_self_treatment,
        see_dentalcare,
        times_dentalcare,
        payfor_dentalcare,
        cost_dentalcare,
        satisfaction_healthcare
    )

write_parquet(medical_insurance_data, "data_export/data_calculated/data_calculated_medical_insurance.parquet")
```

### 疾病情况计算
```{r 疾病情况计算}
# 计算身体残疾情况
my_data_calculated <- my_data_calculated %>%
    mutate(
        physical_disability = case_when(
            my_data_manual_filtered$zda005_1_ == 1 ~ 1,  # yes记为1
            TRUE ~ 0  # 其他值记为0
        )
    )
attr(my_data_calculated$physical_disability, "label") <- "是否有身体残疾"

# 计算智力残疾情况
my_data_calculated <- my_data_calculated %>%
    mutate(
        intellectual_disability = case_when(
            my_data_manual_filtered$zda005_2_ == 1 ~ 1,  # yes记为1
            TRUE ~ 0  # 其他值记为0
        )
    )
attr(my_data_calculated$intellectual_disability, "label") <- "是否有智力残疾"

# 计算视力残疾情况
my_data_calculated <- my_data_calculated %>%
    mutate(
        blind_partially_blind = case_when(
            my_data_manual_filtered$zda005_3_ == 1 ~ 1,  # yes记为1
            TRUE ~ 0  # 其他值记为0
        )
    )
attr(my_data_calculated$blind_partially_blind, "label") <- "是否有视力残疾"

# 计算听力残疾情况
my_data_calculated <- my_data_calculated %>%
    mutate(
        deaf_partially_deaf = case_when(
            my_data_manual_filtered$zda005_4_ == 1 ~ 1,  # yes记为1
            TRUE ~ 0  # 其他值记为0
        )
    )
attr(my_data_calculated$deaf_partially_deaf, "label") <- "是否有听力残疾"

# 计算语言残疾情况
my_data_calculated <- my_data_calculated %>%
    mutate(
        dumb_severe_stuttering = case_when(
            my_data_manual_filtered$zda005_5_ == 1 ~ 1,  # yes记为1
            TRUE ~ 0  # 其他值记为0
        )
    )
attr(my_data_calculated$dumb_severe_stuttering, "label") <- "是否有语言残疾"

# 计算残疾总数
my_data_calculated <- my_data_calculated %>%
    mutate(
        number_disability = case_when(
            # 如果所有残疾相关变量都是NA，返回NA
            is.na(physical_disability) & 
            is.na(intellectual_disability) & 
            is.na(blind_partially_blind) & 
            is.na(deaf_partially_deaf) & 
            is.na(dumb_severe_stuttering) ~ NA_real_,
            # 否则计算非NA值的总和
            TRUE ~ rowSums(
                select(., physical_disability, 
                       intellectual_disability,
                       blind_partially_blind,
                       deaf_partially_deaf,
                       dumb_severe_stuttering),
                na.rm = TRUE
            )
        )
    )
attr(my_data_calculated$number_disability, "label") <- "残疾总数"

# 计算各类残疾年限
disability_vars <- c("intellectual", "blind_partially_blind", "deaf_partially_deaf", "dumb_severe_stuttering")

for (i in 1:5) {
    # 构建变量名
    disability_005 <- paste0("zda005_", i, "_")
    disability_006 <- paste0("zda006_", i, "_")
    
    if (i == 1) {
        year_var <- "year_physical_disability"
    } else {
        year_var <- paste0("year_", disability_vars[i-1])
    }
    
    # 计算残疾年限
    my_data_calculated <- my_data_calculated %>%
        mutate(
            !!year_var := case_when(
                get(disability_005, my_data_manual_filtered) == 1 ~ 
                    if_else(!is.na(get(disability_006, my_data_manual_filtered)),
                           2015 - get(disability_006, my_data_manual_filtered),
                           NA_real_),
                get(disability_005, my_data_manual_filtered) == 0 ~ 0,
                TRUE ~ NA_real_
            )
        )
    
    # 添加变量标签
    attr(my_data_calculated[[year_var]], "label") <- paste0(sub("year_", "", year_var), "年限")
}
# 导出疾病情况数据
disability_data <- my_data_calculated %>%
    select(
        ID, physical_disability, intellectual_disability,
        blind_partially_blind, deaf_partially_deaf,
        dumb_severe_stuttering, number_disability,
        year_physical_disability, year_intellectual,
        year_blind_partially_blind, year_deaf_partially_deaf,
        year_dumb_severe_stuttering
    )

write_parquet(disability_data, "data_export/data_calculated/data_calculated_disability.parquet")





```
### 计算数据导出
```{r 数据导出}
# 导出计算后的数据框
write_parquet(my_data_calculated, "data_export/data_calculated/my_data_calculated.parquet")

# 导出计算后的数据框为csv
write.csv(my_data_calculated, "data_export/data_calculated/my_data_calculated.csv", row.names = FALSE)

# 多分类变量在此处按照字符因子计算，还是按照数字计算，哑变量又是在哪里进行


```

### 缺失值筛选
```{r 缺失值筛选及处理}
# 安装并加载所需的包
if (!requireNamespace("visdat", quietly = TRUE)) install.packages("visdat")
library(visdat)

# 查看缺失值情况
vis_miss(my_data_calculated, cluster = TRUE)

# 去除缺失值超过80%的变量
my_data_na_filtered <- my_data_calculated %>%
    select(which(colMeans(is.na(.)) <= 0.8))

# 导出筛选后的数据
write_parquet(my_data_na_filtered, "data_export/my_data_na_filtered.parquet")
```

### 算法筛选
```{r Boruta算法筛选}
# 使用Boruta算法进行变量筛选（Boruta方法应该用在缺失值处理之后还是之前）
set.seed(123)
boruta_output <- Boruta(ic_total_score ~ ., data = my_data_na_filtered, doTrace = 2)

# 获取重要变量
important_vars <- getSelectedAttributes(boruta_output, withTentative = TRUE)

# 创建包含重要变量的新数据框
my_data_boruta_filtered <- my_data_na_filtered %>%
  select(ic_total_score, any_of(important_vars))

# 导出筛选后的数据
write_parquet(my_data_boruta_filtered, "data_export/my_data_boruta_filtered.parquet")

```

## 建模及验证
```{r 数据分割}
# 安装所需的包
if (!requireNamespace("recipes", quietly = TRUE)) install.packages("recipes")
if (!requireNamespace("rsample", quietly = TRUE)) install.packages("rsample")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("caret", quietly = TRUE)) install.packages("caret")

# 加载所需的包
library(recipes)
library(rsample)
library(ggplot2)
library(caret)

# 数据拆分
set.seed(123)
split <- initial_split(my_data_boruta_filtered, prop = 0.7) # 是否需要分层抽样？
ic_train  <- training(split)
ic_test   <- testing(split)

# 特征工程
blueprint <- recipe(ic_total ~ ., data = ic_train) %>%
  step_nzv(all_nominal()) %>%
  step_integer(matches("Qual|Cond|QC|Qu")) %>%
  step_center(all_numeric(), -all_outcomes()) %>%
  step_scale(all_numeric(), -all_outcomes()) %>%
  step_dummy(all_nominal(), -all_outcomes(), one_hot = TRUE) %>%
  step_impute_knn(all_predictors(), neighbors = 6)

# 确定再采样验证方法
cv <- trainControl(
  method = "repeatedcv", 
  number = 10, 
  repeats = 5
)

# 构建超参数网格
hyper_grid <- expand.grid(
  neighbors = c(1, 3, 5, 7, 9)
)

# 多元线性回归
lm_fit <- train(
  blueprint, 
  data = ic_train, 
  method = "lm", 
  trControl = cv, 
  tuneGrid = hyper_grid,
  metric = "RMSE"
)
```